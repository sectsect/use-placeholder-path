{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { usePathname, useParams } from 'next/navigation';\n\n/**\n * A custom React hook for retrieve placeholder path in Next.js App Router.\n *\n * @returns The placeholder path with dynamic segments replaced by their parameter names.\n *\n * @remarks\n * This hook supports URL-encoded characters (e.g. Japanese) in the path.\n * It ignores query parameters in the URL.\n *\n * @example\n * // For a route like '/users/123/posts/456'\n * // with params \\{ userId: '123', postId: '456' \\}\n * const placeholderPath = usePlaceholderPath();\n * // placeholderPath will be '/users/[userId]/posts/[postId]'\n *\n * @example\n * // For a catch-all route like '/blog/2023/03/15'\n * // with params \\{ slug: ['2023', '03', '15'] \\}\n * const placeholderPath = usePlaceholderPath();\n * // placeholderPath will be '/blog/[...slug]'\n */\nconst usePlaceholderPath = (): string => {\n  const pathname = usePathname();\n  const params = useParams();\n\n  if (!pathname) {\n    return '';\n  }\n\n  // Remove query parameters if present\n  const pathWithoutQuery = pathname.split('?')[0];\n  const decodedPathname = decodeURIComponent(pathWithoutQuery);\n  const segments = decodedPathname.split('/').filter(Boolean);\n\n  // Replace parameters with placeholders\n  Object.entries(params).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      // Handle catch-all routes\n      const placeholder = `[...${key}]`;\n      const decodedValues = value.map(decodeURIComponent);\n      const startIndex = segments.findIndex(\n        segment => segment === decodedValues[0],\n      );\n      if (startIndex !== -1) {\n        segments.splice(startIndex, decodedValues.length, placeholder);\n      }\n    } else if (typeof value === 'string') {\n      // Handle regular dynamic routes\n      const decodedValue = decodeURIComponent(value);\n      const replaceIndex = segments.findIndex(\n        segment => segment === decodedValue,\n      );\n      if (replaceIndex !== -1) {\n        segments[replaceIndex] = `[${key}]`;\n      }\n    }\n  });\n\n  return `/${segments.join('/')}`;\n};\n\nexport default usePlaceholderPath;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAuC;AAuBvC,IAAM,qBAAqB,MAAc;AACvC,QAAM,eAAW,+BAAY;AAC7B,QAAM,aAAS,6BAAU;AAEzB,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AAGA,QAAM,mBAAmB,SAAS,MAAM,GAAG,EAAE,CAAC;AAC9C,QAAM,kBAAkB,mBAAmB,gBAAgB;AAC3D,QAAM,WAAW,gBAAgB,MAAM,GAAG,EAAE,OAAO,OAAO;AAG1D,SAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC/C,QAAI,MAAM,QAAQ,KAAK,GAAG;AAExB,YAAM,cAAc,OAAO,GAAG;AAC9B,YAAM,gBAAgB,MAAM,IAAI,kBAAkB;AAClD,YAAM,aAAa,SAAS;AAAA,QAC1B,aAAW,YAAY,cAAc,CAAC;AAAA,MACxC;AACA,UAAI,eAAe,IAAI;AACrB,iBAAS,OAAO,YAAY,cAAc,QAAQ,WAAW;AAAA,MAC/D;AAAA,IACF,WAAW,OAAO,UAAU,UAAU;AAEpC,YAAM,eAAe,mBAAmB,KAAK;AAC7C,YAAM,eAAe,SAAS;AAAA,QAC5B,aAAW,YAAY;AAAA,MACzB;AACA,UAAI,iBAAiB,IAAI;AACvB,iBAAS,YAAY,IAAI,IAAI,GAAG;AAAA,MAClC;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO,IAAI,SAAS,KAAK,GAAG,CAAC;AAC/B;AAEA,IAAO,cAAQ;","names":[]}