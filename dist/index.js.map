{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { usePathname, useParams } from 'next/navigation';\n\n/**\n * Decodes and splits a pathname into segments.\n * @param pathname - The URL pathname to decode and split.\n * @returns An array of decoded path segments, excluding empty segments.\n */\nconst getDecodedPathSegments = (pathname: string): string[] => {\n  return decodeURIComponent(pathname.split('?')[0]).split('/').filter(Boolean);\n};\n\n/**\n * Generates a placeholder string for dynamic route segments.\n * @param key - The parameter key.\n * @param value - The parameter value, which can be a string or an array of strings.\n * @returns A placeholder string representing the dynamic segment.\n */\nconst getPlaceholder = (key: string, value: string | string[]): string => {\n  if (key.startsWith('__OPTIONAL_CATCH_ALL__')) {\n    const segmentName = key.replace('__OPTIONAL_CATCH_ALL__', '');\n    return `[[...${segmentName}]]`;\n  }\n  if (Array.isArray(value)) {\n    return `[...${key}]`;\n  }\n  return `[${key}]`;\n};\n\n/**\n * Replaces dynamic segments in a path with their corresponding placeholders.\n * @param segments - An array of path segments.\n * @param params - An object containing dynamic route parameters.\n * @returns A new array of segments with dynamic parts replaced by placeholders.\n */\nconst replaceDynamicSegments = (\n  segments: string[],\n  params: Record<string, string | string[]>,\n): string[] => {\n  const newSegments = [...segments];\n\n  Object.entries(params).forEach(([key, value]) => {\n    const placeholder = getPlaceholder(key, value);\n    const values = Array.isArray(value) ? value : [value];\n    const decodedValues = values.map(decodeURIComponent);\n\n    const startIndex = newSegments.findIndex(segment =>\n      decodedValues.includes(segment),\n    );\n\n    if (startIndex !== -1) {\n      newSegments.splice(startIndex, decodedValues.length, placeholder);\n    }\n  });\n\n  return newSegments;\n};\n\n/**\n * A custom React hook to retrieve placeholder path in Next.js App Router.\n * @returns The placeholder path with dynamic segments replaced by their parameter names.\n */\nconst usePlaceholderPath = () => {\n  const pathname = usePathname();\n  const params = useParams();\n\n  if (!pathname) return '';\n\n  const segments = getDecodedPathSegments(pathname);\n  const placeholderSegments = replaceDynamicSegments(segments, params);\n\n  return `/${placeholderSegments.join('/')}`;\n};\n\nexport default usePlaceholderPath;\n"],"mappings":";AAAA,SAAS,aAAa,iBAAiB;AAOvC,IAAM,yBAAyB,CAAC,aAA+B;AAC7D,SAAO,mBAAmB,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,GAAG,EAAE,OAAO,OAAO;AAC7E;AAQA,IAAM,iBAAiB,CAAC,KAAa,UAAqC;AACxE,MAAI,IAAI,WAAW,wBAAwB,GAAG;AAC5C,UAAM,cAAc,IAAI,QAAQ,0BAA0B,EAAE;AAC5D,WAAO,QAAQ,WAAW;AAAA,EAC5B;AACA,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,OAAO,GAAG;AAAA,EACnB;AACA,SAAO,IAAI,GAAG;AAChB;AAQA,IAAM,yBAAyB,CAC7B,UACA,WACa;AACb,QAAM,cAAc,CAAC,GAAG,QAAQ;AAEhC,SAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC/C,UAAM,cAAc,eAAe,KAAK,KAAK;AAC7C,UAAM,SAAS,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AACpD,UAAM,gBAAgB,OAAO,IAAI,kBAAkB;AAEnD,UAAM,aAAa,YAAY;AAAA,MAAU,aACvC,cAAc,SAAS,OAAO;AAAA,IAChC;AAEA,QAAI,eAAe,IAAI;AACrB,kBAAY,OAAO,YAAY,cAAc,QAAQ,WAAW;AAAA,IAClE;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAMA,IAAM,qBAAqB,MAAM;AAC/B,QAAM,WAAW,YAAY;AAC7B,QAAM,SAAS,UAAU;AAEzB,MAAI,CAAC,SAAU,QAAO;AAEtB,QAAM,WAAW,uBAAuB,QAAQ;AAChD,QAAM,sBAAsB,uBAAuB,UAAU,MAAM;AAEnE,SAAO,IAAI,oBAAoB,KAAK,GAAG,CAAC;AAC1C;AAEA,IAAO,cAAQ;","names":[]}